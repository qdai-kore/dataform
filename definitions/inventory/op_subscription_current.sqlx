config {
    type:"operations"
}

js {
  const last_n_days = dataform.projectConfig.vars.op_subscription_details_prev_day;
}

select ${last_n_days} as last_n_days;

---

merge `inventory.sub_details` sub
using(
  select array_agg(t order by etl_update desc limit 1)[offset(0)].*
    from etl_cpro.etl_inv_subscription t
    where etl_update >= TIMESTAMP_TRUNC(DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL ${last_n_days} DAY), DAY)  
    group by t.subscription_urn
) etl on etl.subscription_urn = sub.subscription_urn
when matched then update set 
sub.iccid = etl.iccid,
sub.org_urn = etl.org_urn,
sub.org_id = etl.org_id,
sub.cost_center_id = etl.cost_center_id,
sub.cost_center_urn = etl.cost_center_urn,
sub.service_type_id = etl.service_type_id,
sub.created_date = etl.created_date,
sub.state = etl.state,
sub.eid = etl.eid,
sub.sim_category = etl.sim_category,
sub.last_active_msisdn = etl.last_active_msisdn,
sub.last_active_imsi = etl.last_active_imsi,
sub.product_offer = etl.product_offer,
sub.mode = etl.mode,
sub.related_profile = etl.related_profile,
sub.last_active_profile_id = etl.last_active_profile_id,
sub.ip_addresses = etl.ip_addresses,
sub.warehouse = etl.warehouse,
sub.file_name = etl.file_name,
sub.format_name = etl.format_name,
sub.stock_order_request_id = etl.stock_order_request_id,
sub.last_activated_date = etl.last_activated_date,
sub.last_deactivated_date = etl.last_deactivated_date,
sub.last_suspended_date = etl.last_suspended_date,
sub.last_stocked_date = etl.last_stocked_date,
sub.last_ready_date = etl.last_ready_date,
sub.last_barred_date = etl.last_barred_date,
sub.last_scrapped_date = etl.last_scrapped_date,
sub.last_pending_scrapped_date = etl.last_pending_scrapped_date,
sub.last_suspended_with_charge_date = etl.last_suspended_with_charge_date,
sub.last_test_date = etl.last_test_date,
sub.last_on_order_date = etl.last_on_order_date,
sub.etl_update = etl.etl_update,
sub.metadata = etl.metadata
when not matched then insert row